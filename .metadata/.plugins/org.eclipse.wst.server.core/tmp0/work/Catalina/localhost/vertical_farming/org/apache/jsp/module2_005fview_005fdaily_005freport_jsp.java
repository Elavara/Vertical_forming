/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.53
 * Generated at: 2025-02-12 04:53:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class module2_005fview_005fdaily_005freport_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Crop Status Overview</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: Arial, sans-serif;\r\n");
      out.write("            background-image: url('mod2.jpg'); /* Update with your image path */\r\n");
      out.write("            background-size: cover; /* Cover the whole page */\r\n");
      out.write("            background-position: center; /* Center the image */\r\n");
      out.write("            background-attachment: fixed; /* Fix the background while scrolling */\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        h2 {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            color: #333;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .table-container {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            margin: auto;\r\n");
      out.write("            overflow-x: auto;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        table {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            border-collapse: collapse;\r\n");
      out.write("            margin: 20px 0;\r\n");
      out.write("            background-color: rgba(255, 255, 255, 0.8); /* White with 80% opacity for transparency */\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th, td {\r\n");
      out.write("            padding: 15px;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("            border-bottom: 1px solid rgba(0, 0, 0, 0.1); /* Light border */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th {\r\n");
      out.write("            background-color: #388e3c; /* Dark green header */\r\n");
      out.write("            color: white;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        td.status {\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .available {\r\n");
      out.write("            color: green;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .growing {\r\n");
      out.write("            color: orange;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .not-available {\r\n");
      out.write("            color: red;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        tr:hover {\r\n");
      out.write("            background-color: rgba(200, 230, 201, 0.5); /* Light green on hover with opacity */\r\n");
      out.write("            cursor: pointer; /* Change cursor to pointer */\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("   <h2 style=\"text-transform: uppercase; color: white;\">Crop Status Overview</h2>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"table-container\">\r\n");
      out.write("        <table id=\"cropTable\">\r\n");
      out.write("            <thead>\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <th onclick=\"sortTable(0)\">Crop Name</th>\r\n");
      out.write("                    <th onclick=\"sortTable(1)\">Total Quantity</th>\r\n");
      out.write("                    <th onclick=\"sortTable(2)\">Quantity Available</th>\r\n");
      out.write("                    <th onclick=\"sortTable(3)\">Growing Status</th>\r\n");
      out.write("                    <th onclick=\"sortTable(4)\">Number of Growing</th>\r\n");
      out.write("                    <th onclick=\"sortTable(5)\">Number of Fully Grown</th>\r\n");
      out.write("                    <th onclick=\"sortTable(6)\">Growing Quantity</th>\r\n");
      out.write("                    <th onclick=\"sortTable(7)\">Fully Grown Quantity</th>\r\n");
      out.write("                    <th onclick=\"sortTable(8)\">Estimated Days to Maturity</th>\r\n");
      out.write("                    <th onclick=\"sortTable(9)\">Notes</th>\r\n");
      out.write("                </tr>\r\n");
      out.write("            </thead>\r\n");
      out.write("            <tbody>\r\n");
      out.write("             ");

                    // Database connection details
                    String jdbcUrl = "jdbc:mysql://localhost:3306/vertical_farming"; // Update with your database name
                    String dbUser = "root"; // Update with your database username
                    String dbPassword = "root"; // Update with your database password

                    Connection conn = null;
                    Statement stmt = null;
                    ResultSet rs = null;

                    try {
                        // Establishing a database connection
                        Class.forName("com.mysql.jdbc.Driver"); // Ensure MySQL JDBC driver is included in your project
                        conn = DriverManager.getConnection(jdbcUrl, dbUser, dbPassword);
                        stmt = conn.createStatement();
                        String sql = "SELECT Fruit_Vegetable, Total_Quantity, Quantity_Available, Growing_Status, Number_of_Growing, Number_of_Fully_Grown, Growing_Quantity, Fully_Grown_Quantity, Estimated_Days_to_Maturity, Notes FROM module2_product_availability_upload";
                        rs = stmt.executeQuery(sql);

                        // Loop through the result set and display the data in the table
                        while (rs.next()) {
                            String fruitVegetable = rs.getString("Fruit_Vegetable");
                            String totalQuantity = rs.getString("Total_Quantity");
                            String quantityAvailable = rs.getString("Quantity_Available");
                            String growingStatus = rs.getString("Growing_Status");
                            String numberOfGrowing = rs.getString("Number_of_Growing");
                            String numberOfFullyGrown = rs.getString("Number_of_Fully_Grown");
                            String growingQuantity = rs.getString("Growing_Quantity");
                            String fullyGrownQuantity = rs.getString("Fully_Grown_Quantity");
                            String estimatedDaysToMaturity = rs.getString("Estimated_Days_to_Maturity");
                            String notes = rs.getString("Notes");

                            // Determine the status class based on the growing status
                            String statusClass = "";
                            if ("Available".equalsIgnoreCase(growingStatus)) {
                                statusClass = "available";
                            } else if ("Growing".equalsIgnoreCase(growingStatus)) {
                                statusClass = "growing";
                            } else {
                                statusClass = "not-available";
                            }
                            
      out.write("\r\n");
      out.write("                            <tr onclick=\"showCropDetails('");
      out.print( fruitVegetable );
      out.write("', '");
      out.print( totalQuantity );
      out.write("', '");
      out.print( quantityAvailable );
      out.write("', '");
      out.print( growingStatus );
      out.write("', '");
      out.print( numberOfGrowing );
      out.write("', '");
      out.print( numberOfFullyGrown );
      out.write("', '");
      out.print( growingQuantity );
      out.write("', '");
      out.print( fullyGrownQuantity );
      out.write("', '");
      out.print( estimatedDaysToMaturity );
      out.write("', '");
      out.print( notes );
      out.write("')\">\r\n");
      out.write("                                <td>");
      out.print( fruitVegetable );
      out.write("</td>\r\n");
      out.write("                                <td>");
      out.print( totalQuantity );
      out.write("</td>\r\n");
      out.write("                                <td>");
      out.print( quantityAvailable );
      out.write("</td>\r\n");
      out.write("                                <td class=\"status ");
      out.print( statusClass );
      out.write('"');
      out.write('>');
      out.print( growingStatus );
      out.write("</td>\r\n");
      out.write("                                <td>");
      out.print( numberOfGrowing );
      out.write("</td>\r\n");
      out.write("                                <td>");
      out.print( numberOfFullyGrown );
      out.write("</td>\r\n");
      out.write("                                <td>");
      out.print( growingQuantity );
      out.write("</td>\r\n");
      out.write("                                <td>");
      out.print( fullyGrownQuantity );
      out.write("</td>\r\n");
      out.write("                                <td>");
      out.print( estimatedDaysToMaturity );
      out.write("</td>\r\n");
      out.write("                                <td>");
      out.print( notes );
      out.write("</td>\r\n");
      out.write("                            </tr>\r\n");
      out.write("                            ");

                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    } finally {
                        // Closing the resources
                        try {
                            if (rs != null) rs.close();
                            if (stmt != null) stmt.close();
                            if (conn != null) conn.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                
      out.write(" </tbody>\r\n");
      out.write("        </table>\r\n");
      out.write("    </div>\r\n");
      out.write("      <button onclick=\"goBack()\" style=\"position: fixed; bottom: 20px; right: 20px; padding: 10px 20px; background-color: #388e3c; color: white; border: none; border-radius: 5px; cursor: pointer;\">\r\n");
      out.write("        Back\r\n");
      out.write("    </button>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("    function goBack() {\r\n");
      out.write("        window.location.href = 'module2_product_availability.html';\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("        function sortTable(n) {\r\n");
      out.write("            const table = document.getElementById(\"cropTable\");\r\n");
      out.write("            let switching = true;\r\n");
      out.write("            let shouldSwitch;\r\n");
      out.write("            let dir = \"asc\"; // Set the sorting direction to ascending\r\n");
      out.write("            let switchcount = 0;\r\n");
      out.write("            \r\n");
      out.write("            while (switching) {\r\n");
      out.write("                switching = false;\r\n");
      out.write("                const rows = table.rows;\r\n");
      out.write("\r\n");
      out.write("                for (let i = 1; i < (rows.length - 1); i++) {\r\n");
      out.write("                    shouldSwitch = false;\r\n");
      out.write("\r\n");
      out.write("                    const x = rows[i].getElementsByTagName(\"TD\")[n];\r\n");
      out.write("                    const y = rows[i + 1].getElementsByTagName(\"TD\")[n];\r\n");
      out.write("\r\n");
      out.write("                    if (dir === \"asc\") {\r\n");
      out.write("                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\r\n");
      out.write("                            shouldSwitch = true;\r\n");
      out.write("                            break;\r\n");
      out.write("                        }\r\n");
      out.write("                    } else if (dir === \"desc\") {\r\n");
      out.write("                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {\r\n");
      out.write("                            shouldSwitch = true;\r\n");
      out.write("                            break;\r\n");
      out.write("                        }\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                if (shouldSwitch) {\r\n");
      out.write("                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\r\n");
      out.write("                    switching = true;\r\n");
      out.write("                    switchcount++;\r\n");
      out.write("                } else {\r\n");
      out.write("                    if (switchcount === 0 && dir === \"asc\") {\r\n");
      out.write("                        dir = \"desc\"; // If no switching has been done and the direction is \"asc\", set the direction to \"desc\"\r\n");
      out.write("                        switching = true;\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function showCropDetails(name, totalQuantity, quantityAvailable, status, numberOfGrowing, numberOfFullyGrown, growingQuantity, fullyGrownQuantity, estimatedDays, notes) {\r\n");
      out.write("            alert(`Crop Details:\\n\\nName: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\\nTotal Quantity: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${totalQuantity}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\\nQuantity Available: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${quantityAvailable}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\\nStatus: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${status}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\\nNumber of Growing: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${numberOfGrowing}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\\nNumber of Fully Grown: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${numberOfFullyGrown}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\\nGrowing Quantity: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${growingQuantity}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\\nFully Grown Quantity: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${fullyGrownQuantity}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\\nEstimated Days to Maturity: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${estimatedDays}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\\nNotes: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${notes}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`);\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
