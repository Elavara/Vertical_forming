/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.53
 * Generated at: 2025-02-12 07:14:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class module3_005fcultivation_005fcalculation_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Calculated Results</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            background-image: url('m3u.png'); /* Add your background image path here */\r\n");
      out.write("            background-size: cover; /* Cover the entire body */\r\n");
      out.write("            background-position: center; /* Center the image */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .container {\r\n");
      out.write("            width: 90%;\r\n");
      out.write("            max-width: 800px;\r\n");
      out.write("            margin: 50px auto;\r\n");
      out.write("            background-color: rgba(255, 255, 255, 0.8); /* Slightly transparent white for better visibility */\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            box-shadow: 0px 6px 18px rgba(0, 0, 0, 0.1);\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            position: relative; /* Added to position child elements */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        h1 {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            color: #333;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("            text-transform: uppercase;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .back-button, .calculate-button {\r\n");
      out.write("            padding: 10px 15px;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            color: white;\r\n");
      out.write("            background-color: #4CAF50;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            display: block;\r\n");
      out.write("            margin: 20px auto 0;\r\n");
      out.write("            width: 150px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .back-button:hover, .calculate-button:hover {\r\n");
      out.write("            background-color: #45a049;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* New styles for positioning */\r\n");
      out.write("        .back-button {\r\n");
      out.write("            position: absolute; /* Allows positioning at bottom right */\r\n");
      out.write("            bottom: 20px;\r\n");
      out.write("            right: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .calculate-button {\r\n");
      out.write("            margin: 30px auto 0; /* Centered with margin */\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("    <h1>Calculated Data</h1>\r\n");
      out.write("    <form id=\"calculationForm\" action=\"CultivationDataServlet\" method=\"post\"> <!-- Update with your servlet URL -->\r\n");
      out.write("        ");

            // Parse the parameters as doubles
            String fruitsVegetables = request.getParameter("fruits_vegetables");
            double estimatedTime = Double.parseDouble(request.getParameter("estimated_time_days"));
            double totalQuantityAvailable = Double.parseDouble(request.getParameter("total_quantity_available"));
            double projectedGrowthNextMonth = Double.parseDouble(request.getParameter("projected_growth_next_month"));
            double inventoryTurnoverRate = Double.parseDouble(request.getParameter("inventory_turnover_rate"));
            double daysUntilFullStock = Double.parseDouble(request.getParameter("days_until_full_stock"));
            double supplyDeficit = Double.parseDouble(request.getParameter("supply_deficit"));
            double growthPotential = Double.parseDouble(request.getParameter("growth_potential"));

            // Initialize variables for averages and totals
            double totalSunlightExposure = 0.0;
            double totalGrowthRate = 0.0;
            double totalNutrientDelivery = 0.0;
            double totalSpaceEfficiency = 0.0;
            int count = 0;

            // Connect to the database and retrieve cultivation data
            String jdbcUrl = "jdbc:mysql://localhost:3306/vertical_farming"; // Update with your database name
            String dbUser = "root"; // Update with your database username
            String dbPassword = "root"; // Update with your database password

            Connection conn = null;
            PreparedStatement pstmt = null;
            ResultSet rs = null;

            try {
                // Establishing a database connection
                Class.forName("com.mysql.jdbc.Driver");
                conn = DriverManager.getConnection(jdbcUrl, dbUser, dbPassword);

                // Prepare statement to select rows matching the fruits_vegetables parameter
                String sql = "SELECT * FROM module3_cultivation_uploaded WHERE `Fruits/Vegetables` = ?";
                pstmt = conn.prepareStatement(sql);
                pstmt.setString(1, fruitsVegetables);
                rs = pstmt.executeQuery();

                // Loop through the result set and aggregate data for calculations
                while (rs.next()) {
                    totalSunlightExposure += rs.getDouble("Sunlight Exposure (hours/day)");
                    totalGrowthRate += rs.getDouble("Growth Rate (days)");
                    totalNutrientDelivery += rs.getDouble("Nutrient Delivery (g/week)");
                    totalSpaceEfficiency += rs.getDouble("Space Efficiency (sq ft/plant)");
                    count++;
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                // Closing resources
                try {
                    if (rs != null) rs.close();
                    if (pstmt != null) pstmt.close();
                    if (conn != null) conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }

            // Perform average calculations if count is not zero
            if (count > 0) {
                double avgSunlightExposure = totalSunlightExposure / count;
                double avgGrowthRate = totalGrowthRate / count;
                double avgNutrientDelivery = totalNutrientDelivery / count;
                double avgSpaceEfficiency = totalSpaceEfficiency / count;

                // Example final calculations
                double growthImpact = (avgSunlightExposure * totalQuantityAvailable) / avgGrowthRate;
                double nutrientGrowthFactor = (avgNutrientDelivery * growthPotential) / avgGrowthRate;
                double spaceEfficiencyImpact = totalQuantityAvailable / avgSpaceEfficiency;

                // Additional Calculations
                double estimatedDaysToCultivate = avgGrowthRate;  // Directly using average growth rate
                double yieldEfficiency = totalQuantityAvailable / avgSpaceEfficiency;
                double projectedHarvestInXDays = (projectedGrowthNextMonth / 30) * estimatedDaysToCultivate;  // Assuming monthly growth
                double cultivationEfficiencyRatio = (avgNutrientDelivery * avgSpaceEfficiency) / avgGrowthRate;

                // Output the calculated results
                out.println("<p><strong>Growth Impact from Sunlight Exposure: </strong>" + String.format("%.2f", growthImpact) + " tons/day</p>");
                out.println("<p><strong>Nutrient Growth Factor: </strong>" + String.format("%.2f", nutrientGrowthFactor) + " tons</p>");
                out.println("<p><strong>Space Efficiency Impact: </strong>" + String.format("%.2f", spaceEfficiencyImpact) + " tons</p>");
                out.println("<p><strong>Estimated Days to Cultivate: </strong>" + String.format("%.2f", estimatedDaysToCultivate) + " days</p>");
                out.println("<p><strong>Yield Efficiency: </strong>" + String.format("%.2f", yieldEfficiency) + " tons/plant sq.ft</p>");
                out.println("<p><strong>Projected Harvest in " + String.format("%.2f", estimatedDaysToCultivate) + " Days: </strong>" + String.format("%.2f", projectedHarvestInXDays) + " tons</p>");
                out.println("<p><strong>Cultivation Efficiency Ratio: </strong>" + String.format("%.2f", cultivationEfficiencyRatio) + " units</p>");

                // Adding hidden inputs for calculated results
                out.println("<input type='hidden' name='fruits_vegetables' value='" + fruitsVegetables + "' />"); // Added hidden input for fruits/vegetables
                out.println("<input type='hidden' name='growthImpact' value='" + String.format("%.2f", growthImpact) + "' />");
                out.println("<input type='hidden' name='nutrientGrowthFactor' value='" + String.format("%.2f", nutrientGrowthFactor) + "' />");
                out.println("<input type='hidden' name='spaceEfficiencyImpact' value='" + String.format("%.2f", spaceEfficiencyImpact) + "' />");
                out.println("<input type='hidden' name='estimatedDaysToCultivate' value='" + String.format("%.2f", estimatedDaysToCultivate) + "' />");
                out.println("<input type='hidden' name='yieldEfficiency' value='" + String.format("%.2f", yieldEfficiency) + "' />");
                out.println("<input type='hidden' name='projectedHarvestInXDays' value='" + String.format("%.2f", projectedHarvestInXDays) + "' />");
                out.println("<input type='hidden' name='cultivationEfficiencyRatio' value='" + String.format("%.2f", cultivationEfficiencyRatio) + "' />");
            } else {
                out.println("<p>No cultivation data available for calculation.</p>");
            }
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <button type=\"button\" class=\"calculate-button\" onclick=\"document.getElementById('calculationForm').submit()\">Submit</button>\r\n");
      out.write("        <a href=\"module3_culativation_process.jsp\" class=\"back-button\">Go Back</a>\r\n");
      out.write("    </form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
