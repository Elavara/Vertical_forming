/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.53
 * Generated at: 2025-02-12 08:38:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import javax.servlet.http.*;
import javax.servlet.*;

public final class module5_005fmail_005fcheck_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    // Get the email parameter from the previous page form submission
    String email = request.getParameter("email");

    // Database connection details
    String jdbcURL = "jdbc:mysql://localhost:3306/vertical_farming"; // Replace with your DB
    String jdbcUsername = "root"; // Replace with your DB username
    String jdbcPassword = "root"; // Replace with your DB password

    Connection connection = null;
    PreparedStatement preparedStatement = null;
    ResultSet resultSet = null;

    boolean emailExists = false;

    try {
        // Load the MySQL JDBC driver
        Class.forName("com.mysql.jdbc.Driver");

        // Establish the connection
        connection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);

        // Prepare SQL query to check if the email exists
        String sql = "SELECT * FROM module_5_testing WHERE email = ?";
        preparedStatement = connection.prepareStatement(sql);
        preparedStatement.setString(1, email);

        // Execute the query
        resultSet = preparedStatement.executeQuery();

        if (resultSet.next()) {
            // Email exists in the database
            emailExists = true;

            // Retrieve user details
            String id = resultSet.getString("id");
            String name = resultSet.getString("name");
            String phoneNumber = resultSet.getString("phone_number");
            String address = resultSet.getString("address");
            String password = resultSet.getString("password");
            String status = resultSet.getString("status");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>User Details</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        html, body {\r\n");
      out.write("            height: 100%;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            background: linear-gradient(45deg, #49a09d, #5f2c82);\r\n");
      out.write("            font-family: sans-serif;\r\n");
      out.write("            font-weight: 100;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .container {\r\n");
      out.write("            position: absolute;\r\n");
      out.write("            top: 50%;\r\n");
      out.write("            left: 50%;\r\n");
      out.write("            transform: translate(-50%, -50%);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        h1 {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            color: white;\r\n");
      out.write("            font-size: 28px;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("            text-transform: uppercase;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        table {\r\n");
      out.write("            width: 800px;\r\n");
      out.write("            border-collapse: collapse;\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th,\r\n");
      out.write("        td {\r\n");
      out.write("            padding: 15px;\r\n");
      out.write("            background-color: rgba(255, 255, 255, 0.2);\r\n");
      out.write("            color: #fff;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th {\r\n");
      out.write("            text-align: left;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        thead th {\r\n");
      out.write("            background-color: #55608f;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        tbody tr:hover {\r\n");
      out.write("            background-color: rgba(255, 255, 255, 0.3);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        td {\r\n");
      out.write("            position: relative;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        td:hover:before {\r\n");
      out.write("            content: \"\";\r\n");
      out.write("            position: absolute;\r\n");
      out.write("            left: 0;\r\n");
      out.write("            right: 0;\r\n");
      out.write("            top: -9999px;\r\n");
      out.write("            bottom: -9999px;\r\n");
      out.write("            background-color: rgba(255, 255, 255, 0.2);\r\n");
      out.write("            z-index: -1;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .back-button {\r\n");
      out.write("            position: absolute;\r\n");
      out.write("            bottom: 20px;\r\n");
      out.write("            right: 20px;\r\n");
      out.write("            background-color: #5f2c82;\r\n");
      out.write("            color: white;\r\n");
      out.write("            padding: 10px 20px;\r\n");
      out.write("            border: none;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            text-transform: uppercase;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .back-button:hover {\r\n");
      out.write("            background-color: #49a09d;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <h1>DETECTION EMPLOYEE</h1>\r\n");
      out.write("        <table>\r\n");
      out.write("            <thead>\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <th>ID</th>\r\n");
      out.write("                    <th>Name</th>\r\n");
      out.write("                    <th>Email</th>\r\n");
      out.write("                    <th>Phone Number</th>\r\n");
      out.write("                    <th>Address</th>\r\n");
      out.write("                    <th>Status</th>\r\n");
      out.write("                </tr>\r\n");
      out.write("            </thead>\r\n");
      out.write("            <tbody>\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <td>");
      out.print( id );
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print( name );
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print( email );
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print( phoneNumber );
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print( address );
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print( status );
      out.write("</td>\r\n");
      out.write("                </tr>\r\n");
      out.write("            </tbody>\r\n");
      out.write("        </table>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <!-- Back Button -->\r\n");
      out.write("    <button class=\"back-button\" onclick=\"window.location.href='module5_mailstatus.html'\">Back</button>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");

        } else {
            // Email does not exist, redirect to module2_mailstatus.html with a popup

      out.write("\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("        alert(\"Email not found!\");\r\n");
      out.write("        window.location.href = \"module2_mailstatus.html\";\r\n");
      out.write("    </script>\r\n");

        }
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (resultSet != null) resultSet.close();
        if (preparedStatement != null) preparedStatement.close();
        if (connection != null) connection.close();
    }

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
