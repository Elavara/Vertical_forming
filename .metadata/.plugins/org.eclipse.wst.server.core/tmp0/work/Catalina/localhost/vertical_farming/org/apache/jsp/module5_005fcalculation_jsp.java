/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.53
 * Generated at: 2025-02-12 08:40:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.Set;
import java.util.HashSet;

public final class module5_005fcalculation_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.HashSet");
    _jspx_imports_classes.add("java.util.Set");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Calculated Results</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            background-image: url('test.jpg'); /* Background image path */\r\n");
      out.write("            background-size: cover;\r\n");
      out.write("            background-position: center;\r\n");
      out.write("            background-attachment: fixed;\r\n");
      out.write("            background-repeat: no-repeat;\r\n");
      out.write("        }\r\n");
      out.write("        .container {\r\n");
      out.write("            background: rgba(255, 255, 255, 0.9);\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\r\n");
      out.write("            margin-bottom: 40px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("        h1 {\r\n");
      out.write("            color: #333;\r\n");
      out.write("        }\r\n");
      out.write("        table {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            border-collapse: collapse;\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        th, td {\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("        }\r\n");
      out.write("        th {\r\n");
      out.write("            background-color: #4CAF50;\r\n");
      out.write("            color: white;\r\n");
      out.write("        }\r\n");
      out.write("        .button-container {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: space-between;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        .button {\r\n");
      out.write("            background-color: rgba(76, 175, 80, 0.8);\r\n");
      out.write("            color: white;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            padding: 10px 20px;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("        }\r\n");
      out.write("        .button.back {\r\n");
      out.write("            background-color: #f44336;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("    <h1>Calculated Results Table</h1>\r\n");
      out.write("    \r\n");
      out.write("    <form action=\"test_calculated\" method=\"post\">\r\n");
      out.write("        <table>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>Variety</th>\r\n");
      out.write("                <th>Average Water Usage</th>\r\n");
      out.write("                <th>Total Weight</th>\r\n");
      out.write("                <th>Number of Records</th>\r\n");
      out.write("                <th>Average Nutrient Level</th>\r\n");
      out.write("                <th>Average Harvest Efficiency</th>\r\n");
      out.write("                <th>Average Space Utilization</th>\r\n");
      out.write("                <th>Average Yield Comparison</th>\r\n");
      out.write("                <th>Average Sunlight Efficiency</th>\r\n");
      out.write("                <th>Average Iron Level</th>\r\n");
      out.write("                <th>Average Protein Level</th>\r\n");
      out.write("                <th>Average Vitamin C Level</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                ");

                // Getting the crop from the previous page
                String crop = request.getParameter("crop");
                String jdbcUrl = "jdbc:mysql://localhost:3306/vertical_farming";
                String dbUser = "root";
                String dbPassword = "root";
                Connection conn = null;
                PreparedStatement pstmt = null;
                ResultSet rs = null;
                
                double totalWaterUsage = 0;
                double totalWeightCalculated = 0;
                double totalNutrients = 0;
                double totalHarvestEfficiency = 0;
                double totalSpaceUtilization = 0;
                double totalYieldComparison = 0;
                double totalSunlightEfficiency = 0;
                double totalIronLevel = 0;
                double totalProteinLevel = 0;
                double totalVitaminCLevel = 0;
                int totalRecords = 0;

                // Set to keep track of varieties
                Set<String> varieties = new HashSet<>();

                try {
                    Class.forName("com.mysql.jdbc.Driver"); // Updated JDBC driver
                    conn = DriverManager.getConnection(jdbcUrl, dbUser, dbPassword);
                    
                    // Query to find the matching variety
                    String sql = "SELECT * FROM module5_testing_upload WHERE Variety= ?";
                    pstmt = conn.prepareStatement(sql);
                    pstmt.setString(1, crop);
                    rs = pstmt.executeQuery();

                    while (rs.next()) {
                        // Get values from the result set
                        double waterUsage = rs.getDouble("WaterUsage"); // Fetching Water Usage from DB
                        double totalNutrient = rs.getDouble("TotalNutrient"); // Fetching Total Nutrient from DB
                        double harvestEfficiency = rs.getDouble("HarvestEfficiency"); // Fetching Harvest Efficiency from DB
                        double spaceUtilization = rs.getDouble("SpaceUtilization"); // Fetching Space Utilization from DB
                        double yieldComparison = rs.getDouble("YieldComparison"); // Fetching Yield Comparison from DB
                        double sunlightEfficiency = rs.getDouble("SunlightEfficiency"); // Fetching Sunlight Efficiency from DB
                        double totalWeight = rs.getDouble("Weight"); // Fetching Weight from DB
                        double ironLevel = rs.getDouble("IronLevel"); // Fetching Iron Level from DB
                        double proteinLevel = rs.getDouble("ProteinLevel"); // Fetching Protein Level from DB
                        double vitaminCLevel = rs.getDouble("VitaminCLevel"); // Fetching Vitamin C Level from DB

                        totalWaterUsage += waterUsage;
                        totalWeightCalculated += totalWeight;
                        totalNutrients += totalNutrient;
                        totalHarvestEfficiency += harvestEfficiency;
                        totalSpaceUtilization += spaceUtilization;
                        totalYieldComparison += yieldComparison;
                        totalSunlightEfficiency += sunlightEfficiency;
                        totalIronLevel += ironLevel;
                        totalProteinLevel += proteinLevel;
                        totalVitaminCLevel += vitaminCLevel;
                        totalRecords++;

                        varieties.add(rs.getString("Variety")); // Store unique varieties
                    }
                } catch (SQLException | ClassNotFoundException e) {
                    e.printStackTrace();
                } finally {
                    // Closing resources
                    if (rs != null) try { rs.close(); } catch (SQLException e) {}
                    if (pstmt != null) try { pstmt.close(); } catch (SQLException e) {}
                    if (conn != null) try { conn.close(); } catch (SQLException e) {}
                }

                // Calculate averages and display results
                double avgWaterUsage = totalWaterUsage / (totalRecords > 0 ? totalRecords : 1);
                double avgNutrients = totalNutrients / (totalRecords > 0 ? totalRecords : 1);
                double avgHarvestEfficiency = totalHarvestEfficiency / (totalRecords > 0 ? totalRecords : 1);
                double avgSpaceUtilization = totalSpaceUtilization / (totalRecords > 0 ? totalRecords : 1);
                double avgYieldComparison = totalYieldComparison / (totalRecords > 0 ? totalRecords : 1);
                double avgSunlightEfficiency = totalSunlightEfficiency / (totalRecords > 0 ? totalRecords : 1);
                double avgIronLevel = totalIronLevel / (totalRecords > 0 ? totalRecords : 1);
                double avgProteinLevel = totalProteinLevel / (totalRecords > 0 ? totalRecords : 1);
                double avgVitaminCLevel = totalVitaminCLevel / (totalRecords > 0 ? totalRecords : 1);
                
      out.write("\r\n");
      out.write("\r\n");
      out.write("                <td><input type=\"hidden\" name=\"varieties\" value=\"");
      out.print( String.join(", ", varieties) );
      out.write('"');
      out.write('>');
      out.print( String.join(", ", varieties) );
      out.write("</td>\r\n");
      out.write("                <td><input type=\"hidden\" name=\"avgWaterUsage\" value=\"");
      out.print( avgWaterUsage );
      out.write('"');
      out.write('>');
      out.print( avgWaterUsage );
      out.write("</td>\r\n");
      out.write("                <td><input type=\"hidden\" name=\"totalWeight\" value=\"");
      out.print( totalWeightCalculated );
      out.write('"');
      out.write('>');
      out.print( totalWeightCalculated );
      out.write("</td>\r\n");
      out.write("                <td><input type=\"hidden\" name=\"totalRecords\" value=\"");
      out.print( totalRecords );
      out.write('"');
      out.write('>');
      out.print( totalRecords );
      out.write("</td>\r\n");
      out.write("                <td><input type=\"hidden\" name=\"avgNutrients\" value=\"");
      out.print( avgNutrients );
      out.write('"');
      out.write('>');
      out.print( avgNutrients );
      out.write("</td>\r\n");
      out.write("                <td><input type=\"hidden\" name=\"avgHarvestEfficiency\" value=\"");
      out.print( avgHarvestEfficiency );
      out.write('"');
      out.write('>');
      out.print( avgHarvestEfficiency );
      out.write("</td>\r\n");
      out.write("                <td><input type=\"hidden\" name=\"avgSpaceUtilization\" value=\"");
      out.print( avgSpaceUtilization );
      out.write('"');
      out.write('>');
      out.print( avgSpaceUtilization );
      out.write("</td>\r\n");
      out.write("                <td><input type=\"hidden\" name=\"avgYieldComparison\" value=\"");
      out.print( avgYieldComparison );
      out.write('"');
      out.write('>');
      out.print( avgYieldComparison );
      out.write("</td>\r\n");
      out.write("                <td><input type=\"hidden\" name=\"avgSunlightEfficiency\" value=\"");
      out.print( avgSunlightEfficiency );
      out.write('"');
      out.write('>');
      out.print( avgSunlightEfficiency );
      out.write("</td>\r\n");
      out.write("                <td><input type=\"hidden\" name=\"avgIronLevel\" value=\"");
      out.print( avgIronLevel );
      out.write('"');
      out.write('>');
      out.print( avgIronLevel );
      out.write("</td>\r\n");
      out.write("                <td><input type=\"hidden\" name=\"avgProteinLevel\" value=\"");
      out.print( avgProteinLevel );
      out.write('"');
      out.write('>');
      out.print( avgProteinLevel );
      out.write("</td>\r\n");
      out.write("                <td><input type=\"hidden\" name=\"avgVitaminCLevel\" value=\"");
      out.print( avgVitaminCLevel );
      out.write('"');
      out.write('>');
      out.print( avgVitaminCLevel );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </table>\r\n");
      out.write("        \r\n");
      out.write("        <div class=\"button-container\">\r\n");
      out.write("            <button type=\"button\" class=\"button back\" onclick=\"window.location.href='module5_processing.jsp'\">Go Back</button>\r\n");
      out.write("            <button type=\"submit\" class=\"button\">Submit</button>\r\n");
      out.write("        </div>\r\n");
      out.write("    </form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
