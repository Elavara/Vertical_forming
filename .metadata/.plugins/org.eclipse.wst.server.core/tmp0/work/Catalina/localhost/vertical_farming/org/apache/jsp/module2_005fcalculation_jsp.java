/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.53
 * Generated at: 2025-02-12 04:54:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class module2_005fcalculation_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Calculation Result</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            background-image: url('vew.jpg'); /* Update with your image URL */\r\n");
      out.write("            background-size: cover;\r\n");
      out.write("            background-position: center;\r\n");
      out.write("            background-repeat: no-repeat;\r\n");
      out.write("            color: #333;\r\n");
      out.write("            position: relative; /* Added for positioning child elements */\r\n");
      out.write("            min-height: 100vh; /* Ensure body takes full height */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .container {\r\n");
      out.write("            width: 90%;\r\n");
      out.write("            max-width: 800px;\r\n");
      out.write("            margin: 50px auto;\r\n");
      out.write("            background-color: rgba(255, 255, 255, 0.9); /* Semi-transparent background */\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n");
      out.write("            position: relative; /* Added for positioning */\r\n");
      out.write("            padding-bottom: 80px; /* Added padding to prevent overlap with fixed buttons */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        h1 {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            color: #007BFF;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .calculation {\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border: 1px solid #ffc107;\r\n");
      out.write("            background-color: rgba(255, 193, 7, 0.1);\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            overflow: auto; /* Ensure content can scroll */\r\n");
      out.write("            max-height: 400px; /* Set max height for scrolling */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .results-table {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            border-collapse: collapse;\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .results-table th, .results-table td {\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("            padding: 8px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            word-wrap: break-word; /* Ensure text wraps properly */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .results-table th {\r\n");
      out.write("            background-color: #007BFF;\r\n");
      out.write("            color: white;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        button {\r\n");
      out.write("            background-color: #007BFF;\r\n");
      out.write("            color: white;\r\n");
      out.write("            border: none;\r\n");
      out.write("            padding: 10px 15px;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            transition: background-color 0.3s;\r\n");
      out.write("            display: block;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        button:hover {\r\n");
      out.write("            background-color: #0056b3;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .back-button {\r\n");
      out.write("            position: fixed; /* Fixed positioning to stick to the viewport */\r\n");
      out.write("            bottom: 20px; /* Distance from the bottom */\r\n");
      out.write("            right: 20px; /* Distance from the right */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .submit-button {\r\n");
      out.write("            position: fixed; /* Fixed positioning to stick to the viewport */\r\n");
      out.write("            bottom: 20px; /* Distance from the bottom */\r\n");
      out.write("            left: 50%; /* Center it horizontally */\r\n");
      out.write("            transform: translateX(-50%); /* Adjust for center alignment */\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("    <h1>Calculation Result</h1>\r\n");
      out.write("\r\n");
      out.write("    ");

        // Database connection details
        String jdbcUrl = "jdbc:mysql://localhost:3306/vertical_farming"; // Update with your database name
        String dbUser = "root"; // Update with your database username
        String dbPassword = "root"; // Update with your database password

        String fruitVegetable = request.getParameter("fruitVegetable");
        int noOfTonsNeeded = Integer.parseInt(request.getParameter("noOfTonsNeeded"));
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            // Establishing a database connection
            Class.forName("com.mysql.jdbc.Driver"); // Ensure the MySQL JDBC driver is in your classpath
            conn = DriverManager.getConnection(jdbcUrl, dbUser, dbPassword);
            String sql = "SELECT * FROM module2_product_availability_upload WHERE Fruit_Vegetable = ?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, fruitVegetable);
            rs = pstmt.executeQuery();

            if (rs.next()) {
                int totalQuantity = Integer.parseInt(rs.getString("Total_Quantity"));
                int quantityAvailable = Integer.parseInt(rs.getString("Quantity_Available"));
                int estimatedDaysToMaturity = Integer.parseInt(rs.getString("Estimated_Days_to_Maturity"));
                String growingStatus = rs.getString("Growing_Status");

                // Calculating remaining tons needed and estimated time
                int remainingTonsNeeded = noOfTonsNeeded - quantityAvailable;
                int estimatedTimePerTon = estimatedDaysToMaturity;
                int totalEstimatedTime = remainingTonsNeeded > 0 ? (remainingTonsNeeded * estimatedTimePerTon) : 0;

                // Additional Calculations
                int totalAvailableQuantity = quantityAvailable + (remainingTonsNeeded > 0 ? 0 : remainingTonsNeeded);
                int totalTimeToGrow = (totalQuantity - quantityAvailable) * estimatedDaysToMaturity;
                double growthRate = (double) quantityAvailable / totalQuantity * 100;
                double projectedGrowthNextMonth = totalQuantity * 0.1; // Assuming 10% growth rate next month
                int inventoryTurnoverRate = totalQuantity / noOfTonsNeeded; 
                int daysUntilFullStock = estimatedDaysToMaturity * remainingTonsNeeded;
                double supplyDeficit = remainingTonsNeeded > 0 ? remainingTonsNeeded : 0;

                // Show the calculation result
    
      out.write("\r\n");
      out.write("                <div class=\"calculation\">\r\n");
      out.write("                    <h2>Calculation Results:</h2>\r\n");
      out.write("                    <form action=\"SubmitResults\" method=\"post\"> <!-- Change \"YourServletURL\" to your actual servlet URL -->\r\n");
      out.write("                        <table class=\"results-table\">\r\n");
      out.write("                            <thead>\r\n");
      out.write("                                <tr><th>fruitVegetable</th>\r\n");
      out.write("                                    <th>Remaining Tons Needed</th>\r\n");
      out.write("                                    <th>Estimated Time (Days)</th>\r\n");
      out.write("                                    <th>Total Quantity Available</th>\r\n");
      out.write("                                    <th>Projected Growth Next Month</th>\r\n");
      out.write("                                    <th>Inventory Turnover Rate</th>\r\n");
      out.write("                                    <th>Days Until Full Stock</th>\r\n");
      out.write("                                    <th>Supply Deficit</th>\r\n");
      out.write("                                    <th>Growth Potential</th>\r\n");
      out.write("                                    <th>Current Stock Status</th>\r\n");
      out.write("                                </tr>\r\n");
      out.write("                            </thead>\r\n");
      out.write("                            <tbody>\r\n");
      out.write("                                <tr>\r\n");
      out.write("                                \r\n");
      out.write("                                        \r\n");
      out.write("                                    <td><input type=\"text\" name=\"fruitVegetable\" value=\"");
      out.print(fruitVegetable);
      out.write("\" readonly></td>\r\n");
      out.write("                                         \r\n");
      out.write("                                    <td><input type=\"text\" name=\"remainingTonsNeeded\" value=\"");
      out.print( remainingTonsNeeded < 0 ? 0 : remainingTonsNeeded );
      out.write("\" readonly></td>\r\n");
      out.write("                                    <td><input type=\"text\" name=\"estimatedTimeDays\" value=\"");
      out.print( estimatedTimePerTon );
      out.write("\" readonly></td>\r\n");
      out.write("                                    <td><input type=\"text\" name=\"totalQuantityAvailable\" value=\"");
      out.print( totalAvailableQuantity );
      out.write("\" readonly></td>\r\n");
      out.write("                                    <td><input type=\"text\" name=\"projectedGrowthNextMonth\" value=\"");
      out.print( projectedGrowthNextMonth );
      out.write("\" readonly></td>\r\n");
      out.write("                                    <td><input type=\"text\" name=\"inventoryTurnoverRate\" value=\"");
      out.print( inventoryTurnoverRate );
      out.write("\" readonly></td>\r\n");
      out.write("                                    <td><input type=\"text\" name=\"daysUntilFullStock\" value=\"");
      out.print( daysUntilFullStock );
      out.write("\" readonly></td>\r\n");
      out.write("                                    <td><input type=\"text\" name=\"supplyDeficit\" value=\"");
      out.print( supplyDeficit );
      out.write("\" readonly></td>\r\n");
      out.write("                                    <td><input type=\"text\" name=\"growthPotential\" value=\"");
      out.print( String.format("%.2f", growthRate) );
      out.write("\" readonly></td>\r\n");
      out.write("                                    <td><input type=\"text\" name=\"currentStockStatus\" value=\"");
      out.print( growingStatus.equalsIgnoreCase("Growing") ? "Not Available" : "Available" );
      out.write("\" readonly></td>\r\n");
      out.write("                                </tr>\r\n");
      out.write("                            </tbody>\r\n");
      out.write("                        </table>\r\n");
      out.write("                        <button type=\"submit\" class=\"submit-button\">Submit</button> <!-- Submit button -->\r\n");
      out.write("                    </form>\r\n");
      out.write("                </div>\r\n");
      out.write("    ");

            } else {
    
      out.write("\r\n");
      out.write("                <div class=\"calculation\">\r\n");
      out.write("                    <h2>No Availability Information Found for ");
      out.print( fruitVegetable );
      out.write(".</h2>\r\n");
      out.write("                </div>\r\n");
      out.write("    ");

            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Closing the resources
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <button class=\"back-button\" onclick=\"window.location.href='modul2_processing_data.jsp';\">Back</button> <!-- Back button -->\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
